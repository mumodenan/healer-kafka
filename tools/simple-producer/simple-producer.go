package main

import (
	"bufio"
	"fmt"
	"io"
	"os"

	goflag "flag"

	"github.com/mumodenan/healer-kafka"
	"github.com/golang/glog"
	flag "github.com/spf13/pflag"
)

var (
	config    = healer.DefaultProducerConfig()
	topic     = flag.String("topic", "", "REQUIRED: The topic write message to.")
	partition = flag.Int("partition", 0, "The partition to consume from.")
)

func init() {
	flag.CommandLine.AddGoFlagSet(goflag.CommandLine)

	flag.StringVar(&config.BootstrapServers, "bootstrap.servers", config.BootstrapServers, "The list of hostname and port of the server to connect to.")
	flag.StringVar(&config.CompressionType, "compression.type", config.CompressionType, "The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none, gzip, snappy, or lz4. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).")
	flag.IntVar(&config.ConnectionsMaxIdleMS, "connections.max.idle.ms", config.ConnectionsMaxIdleMS, "Close idle connections after the number of milliseconds specified by this config.")
}

func main() {
	flag.Parse()

	if *topic == "" {
		flag.PrintDefaults()
		os.Exit(4)
	}

	simpleProducer := healer.NewSimpleProducer(*topic, int32(*partition), config)

	if simpleProducer == nil {
		fmt.Println("could not create simpleProducer")
		os.Exit(5)
	}

	var (
		text     []byte = nil
		line     []byte = nil
		isPrefix bool   = true
		err      error  = nil
	)
	reader := bufio.NewReader(os.Stdin)
	for {
		text = nil
		isPrefix = true
		for isPrefix {
			line, isPrefix, err = reader.ReadLine()
			if err != nil {
				if err == io.EOF {
					os.Exit(0)
				}
				glog.Errorf("readline error:%s", err)
				os.Exit(5)
			}
			if text == nil {
				text = line
			} else {
				text = append(text, line...)
			}
		}
		if err = simpleProducer.AddMessage(nil, text); err != nil {
			glog.Errorf("add message error: %s", err)
		}
	}
}
